{"version":3,"sources":["Carousel/Carousel.tsx","Loader/Loader.tsx","Modal/Modal.tsx","Card/Card.tsx","NewPost/NewPost.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Carousel","children","useState","active","setActive","count","React","Children","className","onClick","i","map","child","style","Math","sign","abs","Loader","version","id","xmlns","xmlnsXlink","x","y","width","height","viewBox","enableBackground","xmlSpace","fill","attributeType","attributeName","type","values","begin","dur","repeatCount","Modal","comments","toggleModal","comment","Fragment","key","email","name","Card","post","setSelectedId","showModal","setShowModal","showLoader","setShowLoader","setTimeout","title","body","NewPost","setTitle","setBody","messageError","setMessageError","messageSuccess","setMessageSuccess","isLoading","setIsLoading","onSubmit","e","preventDefault","trim","newPost","userId","fetch","method","JSON","stringify","headers","then","response","json","catch","error","console","finally","placeholder","value","onChange","target","disabled","App","posts","setPosts","selectedId","setComments","useEffect","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qYAMaA,G,MAA8C,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAC/CC,mBAAS,GADsC,mBACpEC,EADoE,KAC5DC,EAD4D,KAErEC,EAAQC,IAAMC,SAASF,MAAMJ,GAEnC,OACE,yBAAKO,UAAU,YACZL,EAAS,GAAK,4BAAQK,UAAU,WAAWC,QAAS,kBAAML,GAAU,SAAAM,GAAC,OAAIA,EAAI,OAAI,kBAAC,IAAD,OACjFJ,IAAMC,SAASI,IAAIV,GAAU,SAACW,EAAOF,GAAR,OAC5B,yBAAKF,UAAU,iBAAiBK,MAAO,CACnC,WAAYH,IAAMP,EAAS,EAAI,EAC/B,YAAaA,EAASO,GAAK,EAC3B,cAAeI,KAAKC,KAAKZ,EAASO,GAClC,eAAgBI,KAAKE,IAAIb,EAASO,GAAK,EACvC,iBAAkBP,IAAWO,EAAI,OAAS,OAC1C,QAAWI,KAAKE,IAAIb,EAASO,IAhBlB,EAgByC,IAAM,IAC1D,QAAWI,KAAKE,IAAIb,EAASO,GAjBlB,EAiBwC,OAAS,UAE7DE,MAGJT,EAASE,EAAQ,GAAK,4BAAQG,UAAU,YAAYC,QAAS,kBAAML,GAAU,SAAAM,GAAC,OAAIA,EAAI,OAAI,kBAAC,IAAD,UCvBpFO,G,MAAS,WAKpB,OACE,yBAAKT,UAAU,yBACjB,yBAAKU,QAAQ,MAAMC,GAAG,UAAUC,MAAM,6BAA6BC,WAAW,+BAA+BC,EAAE,MAAMC,EAAE,MACpHC,MAAM,OAAOC,OAAO,OAAOC,QAAQ,YAAYb,MAPjC,CACfc,iBAAkB,iBAMsEC,SAAS,YACjG,0BAAMN,EAAE,IAAIC,EAAE,IAAIC,MAAM,IAAIC,OAAO,KAAKI,KAAK,WAC3C,sCAAkBC,cAAc,MAC9BC,cAAc,YAAYC,KAAK,YAC/BC,OAAO,iBACPC,MAAM,IAAIC,IAAI,OAAOC,YAAY,gBAErC,0BAAMd,EAAE,KAAKC,EAAE,IAAIC,MAAM,IAAIC,OAAO,KAAKI,KAAK,WAC5C,sCAAkBC,cAAc,MAC9BC,cAAc,YAAYC,KAAK,YAC/BC,OAAO,iBACPC,MAAM,OAAOC,IAAI,OAAOC,YAAY,gBAExC,0BAAMd,EAAE,KAAKC,EAAE,IAAIC,MAAM,IAAIC,OAAO,KAAKI,KAAK,WAC5C,sCAAkBC,cAAc,MAC9BC,cAAc,YAAYC,KAAK,YAC/BC,OAAO,iBACPC,MAAM,OAAOC,IAAI,OAAOC,YAAY,oBCnB/BC,G,MAAyB,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACjD,OACE,yBAAK/B,UAAU,oBACb,yBAAKA,UAAU,0BACf,4BACMA,UAAU,WAAWC,QAAS,kBAAM8B,EAAY,KADtD,KAIGD,EAAS3B,KAAI,SAAA6B,GAAO,OACnB,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,EAAQrB,IAC7B,yBAAKX,UAAU,WACf,wBAAIA,UAAU,SAASgC,EAAQG,QAGjC,yBAAKnC,UAAU,WACZgC,EAAQI,cCXNC,G,MAAwB,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,KAAMR,EAA8B,EAA9BA,SAAUS,EAAoB,EAApBA,cAAoB,EACxC7C,oBAAS,GAD+B,mBACnE8C,EADmE,KACxDC,EADwD,OAEtC/C,oBAAS,GAF6B,mBAEnEgD,EAFmE,KAEvDC,EAFuD,KAIpEZ,EAAc,SAACpB,GACnBgC,GAAc,GACdJ,EAAc5B,GAEH,IAAPA,IACFgC,GAAc,GACZF,GAAcD,IAGlBI,YAAW,WACTD,GAAc,GACdF,GAAcD,KACb,MAIL,OACE,yBAAKxC,UAAU,QACX,4BAAKsC,EAAKO,OACV,2BAAIP,EAAKQ,MAET,4BAAQ9C,UAAU,eAAeC,QAAS,kBAAM8B,EAAYO,EAAK3B,MAAjE,iBAEC+B,GAAc,kBAAC,EAAD,MAEdF,GACJ,kBAAC,EAAD,CACCV,SAAUA,EACJC,YAAaA,OC1CZgB,G,MAAoB,WAAO,IAAD,EACXrD,mBAAS,IADE,mBAC9BmD,EAD8B,KACvBG,EADuB,OAEbtD,mBAAS,IAFI,mBAE9BoD,EAF8B,KAExBG,EAFwB,OAGGvD,oBAAS,GAHZ,mBAG9BwD,EAH8B,KAGhBC,EAHgB,OAIOzD,oBAAS,GAJhB,mBAI9B0D,EAJ8B,KAIdC,EAJc,OAKH3D,oBAAS,GALN,mBAK9B4D,EAL8B,KAKnBC,EALmB,KA2DrC,OACE,yBAAKvD,UAAU,qBACb,yBAAKA,UAAU,iBAAf,gBACA,yBAAKA,UAAU,kBACb,0BAAMA,UAAU,kBAAkBwD,SA5CnB,SAACC,GAKpB,GAJAA,EAAEC,iBACFP,GAAgB,GAChBE,GAAkB,GAEG,KAAjBR,EAAMc,QAAiC,KAAhBb,EAAKa,OAAhC,CAKAJ,GAAa,GAEb,IAAMK,EAAU,CACdf,QACAC,OACAe,OAAQ,GAGVC,MAAM,6CAA8C,CAClDC,OAAQ,OACRjB,KAAMkB,KAAKC,UAAUL,GACrBM,QAAS,CACP,eAAgB,qCAGjBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACLhB,GAAkB,GAClBL,EAAS,IACTC,EAAQ,OAETqB,OAAM,SAACC,GACNpB,GAAgB,GAChBqB,QAAQD,MAAMA,MAEfE,SAAQ,WACPlB,GAAa,WA9BfJ,GAAgB,KAuCZ,2BACEnD,UAAU,gBACVwB,KAAK,OACLkD,YAAY,QACZC,MAAO9B,EACP+B,SA9DgB,SAACnB,GACzBT,EAASS,EAAEoB,OAAOF,OAClBxB,GAAgB,GAChBE,GAAkB,MA6DZ,2BACErD,UAAU,gBACVwB,KAAK,OACLkD,YAAY,OACZC,MAAO7B,EACP8B,SA/De,SAACnB,GACxBR,EAAQQ,EAAEoB,OAAOF,OACjBxB,GAAgB,GAChBE,GAAkB,MA8DZ,4BAAQ7B,KAAK,SAASsD,SAAUxB,GAC7BA,EAAY,aAAe,UAGhC,yBAAKtD,UAAU,qBACdkD,GAAgB,uBAAGlD,UAAU,yBAAb,oCAChBoD,GAAkB,uBAAGpD,UAAU,2BAAb,gEC7CZ+E,MAnCf,WAAgB,IAAD,EACarF,mBAAkB,IAD/B,mBACNsF,EADM,KACCC,EADD,OAEuBvF,mBAAiB,GAFxC,mBAENwF,EAFM,KAEM3C,EAFN,OAGmB7C,mBAAS,IAH5B,mBAGNoC,EAHM,KAGIqD,EAHJ,KAuBb,OAlBAC,qBAAU,WACRtB,MAAM,8CACHK,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAUY,EAASZ,MACxBC,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,MAElCC,QAAQa,IAAR,QACC,IAEHD,qBAAU,WACRtB,MAAM,8CAAD,OAA+CoB,EAA/C,cACFf,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAUc,EAAYd,MAC3BC,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,MAElCC,QAAQa,IAAIH,KACX,CAACA,IAGF,yBAAKlF,UAAU,OACb,kBAAC,EAAD,KACGgF,EAAM7E,KAAI,SAACmC,GAAD,OACT,kBAAC,EAAD,CAAMA,KAAMA,EAAMR,SAAUA,EAAUS,cAAeA,EAAeL,IAAKI,EAAK3B,SAGlE,IAAfuE,GAAoB,kBAAC,EAAD,QCzBPI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM8B,c","file":"static/js/main.21341b11.chunk.js","sourcesContent":["import React, { ReactNode, useState } from \"react\";\nimport { TiChevronLeftOutline, TiChevronRightOutline } from \"react-icons/ti\";\nimport './Carousel.scss';\n\nconst MAX_VISIBILITY = 3;\n\nexport const Carousel: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [active, setActive] = useState(2);\n  const count = React.Children.count(children);\n  \n  return (\n    <div className='carousel'>\n      {active > 0 && <button className='nav left' onClick={() => setActive(i => i - 1)}><TiChevronLeftOutline/></button>}\n      {React.Children.map(children, (child, i) => (\n        <div className='card-container' style={{\n            '--active': i === active ? 1 : 0,\n            '--offset': (active - i) / 3,\n            '--direction': Math.sign(active - i),\n            '--abs-offset': Math.abs(active - i) / 3,\n            'pointer-events': active === i ? 'auto' : 'none',\n            'opacity': Math.abs(active - i) >= MAX_VISIBILITY ? '0' : '1',\n            'display': Math.abs(active - i) > MAX_VISIBILITY ? 'none' : 'block',\n          } as React.CSSProperties}>\n          {child}\n        </div>\n      ))}\n      {active < count - 1 && <button className='nav right' onClick={() => setActive(i => i + 1)}><TiChevronRightOutline/></button>}\n    </div>\n  );\n};","import './Loader.scss';\nimport React from 'react';\n\nexport const Loader = () => {\n  const svgStyle = {\n    enableBackground: 'new 0 0 50 50'\n  };\n\n  return (\n    <div className=\"loader loader--style5\">\n  <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n     width=\"24px\" height=\"30px\" viewBox=\"0 0 24 30\" style={svgStyle as React.CSSProperties} xmlSpace=\"preserve\">\n    <rect x=\"0\" y=\"0\" width=\"4\" height=\"10\" fill=\"#EC4899\">\n      <animateTransform attributeType=\"xml\"\n        attributeName=\"transform\" type=\"translate\"\n        values=\"0 0; 0 20; 0 0\"\n        begin=\"0\" dur=\"0.6s\" repeatCount=\"indefinite\" />\n    </rect>\n    <rect x=\"10\" y=\"0\" width=\"4\" height=\"10\" fill=\"#EC4899\">\n      <animateTransform attributeType=\"xml\"\n        attributeName=\"transform\" type=\"translate\"\n        values=\"0 0; 0 20; 0 0\"\n        begin=\"0.2s\" dur=\"0.6s\" repeatCount=\"indefinite\" />\n    </rect>\n    <rect x=\"20\" y=\"0\" width=\"4\" height=\"10\" fill=\"#EC4899\">\n      <animateTransform attributeType=\"xml\"\n        attributeName=\"transform\" type=\"translate\"\n        values=\"0 0; 0 20; 0 0\"\n        begin=\"0.4s\" dur=\"0.6s\" repeatCount=\"indefinite\" />\n    </rect>\n  </svg>\n</div>\n  );\n};","import React from \"react\";\nimport { Comments } from \"../types/Comments\";\nimport './Modal.scss';\n\ntype Props = {\n  comments: Comments[];\n  toggleModal: (id: number) => void;\n}\n\nexport const Modal: React.FC<Props> = ({ comments, toggleModal }) => {\n  return (\n    <div className=\"modal-background\">\n      <div className=\"modal-box center-modal\">\n      <strong\n            className=\"closeBtn\" onClick={() => toggleModal(0)}>\n              X\n          </strong>\n        {comments.map(comment => (\n          <React.Fragment key={comment.id}>\n          <div className=\"heading\">\n          <h1 className=\"title\">{comment.email}</h1>\n        </div>\n        \n        <div className=\"content\">\n          {comment.name}\n        </div>\n  \n        </React.Fragment>\n        ))}\n      </div>\n    </div>\n  );\n};","import { Loader } from \"../Loader/Loader\";\nimport { Modal } from \"../Modal/Modal\";\nimport { Comments } from \"../types/Comments\";\nimport { Posts } from \"../types/Posts\";\nimport React, { useState } from 'react';\nimport './Card.scss';\n\ntype Props = {\n  post: Posts;\n  comments: Comments[];\n  setSelectedId: (id: number) => void;\n}\n\nexport const Card: React.FC<Props> = ({ post, comments, setSelectedId }) => {\n  const [showModal, setShowModal] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n\n  const toggleModal = (id: number) => {\n    setShowLoader(true);\n    setSelectedId(id);\n\n    if (id === 0) {\n      setShowLoader(false);\n        setShowModal(!showModal); \n      \n    }\n    setTimeout(() => {\n      setShowLoader(false);\n      setShowModal(!showModal);\n    }, 500);\n    \n  }\n\n  return (\n    <div className='card'>\n        <h2>{post.title}</h2>\n        <p>{post.body}</p>\n       \n        <button className=\"comments_btn\" onClick={() => toggleModal(post.id)}>View Comments</button>\n\n        {showLoader && <Loader />}\n\n        {showModal && (\n\t\t\t\t\t<Modal\n\t\t\t\t\t\tcomments={comments}\n            toggleModal={toggleModal}\n\t\t\t\t\t/>\n\t\t\t\t)}\n    </div>\n  )};","import React, { useState } from 'react';\nimport './NewPost.scss';\n\nexport const NewPost: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [body, setBody] = useState('');\n  const [messageError, setMessageError] = useState(false);\n  const [messageSuccess, setMessageSuccess] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setMessageError(false);\n    setMessageSuccess(false);\n  };\n\n  const handleBodyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setBody(e.target.value);\n    setMessageError(false);\n    setMessageSuccess(false);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setMessageError(false);\n    setMessageSuccess(false);\n\n    if (title.trim() === '' || body.trim() === '') {\n      setMessageError(true);\n      return;\n    }\n\n    setIsLoading(true);\n\n    const newPost = {\n      title,\n      body,\n      userId: 1,\n    };\n\n    fetch('https://jsonplaceholder.typicode.com/posts', {\n      method: 'POST',\n      body: JSON.stringify(newPost),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    })\n      .then((response) => response.json())\n      .then((json) => {\n        setMessageSuccess(true);\n        setTitle('');\n        setBody('');\n      })\n      .catch((error) => {\n        setMessageError(true);\n        console.error(error);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"newpost_container\">\n      <div className=\"newpost_title\">Add new post</div>\n      <div className=\"newpost_window\">\n        <form className=\"newpost_content\" onSubmit={handleSubmit}>\n          <input\n            className=\"newpost__inpt\"\n            type=\"text\"\n            placeholder=\"Title\"\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <input\n            className=\"newpost__inpt\"\n            type=\"text\"\n            placeholder=\"Body\"\n            value={body}\n            onChange={handleBodyChange}\n          />\n          <button type=\"submit\" disabled={isLoading}>\n            {isLoading ? 'Loading...' : 'Enter'}\n          </button>\n        </form>\n        <div className=\"message-container\">\n        {messageError && <p className=\"error-message message\">You have entered incorrect data.</p>}\n        {messageSuccess && <p className=\"success-message message\">Congratulations, your post has been successfully added!</p>}\n      </div>\n      </div>\n    </div>\n  );\n};\n","import './App.scss';\nimport React, { useEffect, useState } from 'react'; // Import React object\nimport { Carousel } from './Carousel/Carousel';\nimport { Card } from './Card/Card';\nimport { Posts } from './types/Posts';\nimport { NewPost } from './NewPost/NewPost';\n\nfunction App() {\n  const [posts, setPosts] = useState<Posts[]>([]);\n  const [selectedId, setSelectedId] = useState<number>(0);\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then((response) => response.json())\n      .then((json) => setPosts(json))\n      .catch((error) => console.error(error)); // Fixed error handling\n\n    console.log(`xd`);\n  }, []);\n\n  useEffect(() => {\n    fetch(`https://jsonplaceholder.typicode.com/posts/${selectedId}/comments`)\n      .then((response) => response.json())\n      .then((json) => setComments(json))\n      .catch((error) => console.error(error)); // Fixed error handling\n\n    console.log(selectedId);\n  }, [selectedId]);\n\n  return (\n    <div className='app'>\n      <Carousel>\n        {posts.map((post) => (\n          <Card post={post} comments={comments} setSelectedId={setSelectedId} key={post.id} />\n        ))}\n      </Carousel>\n      {selectedId === 0 && <NewPost />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}